stages:
  - security
  - build
  - dckr_scan
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

security-sast_product:
  stage: security
  image: node:14
  before_script:
    - cd product
  script:
    - echo "Running security scan sast"
    - npm install
    - npm audit --json > product-service-security-report.json
  artifacts:
      paths:
        - product/product-service-security-report.json

security-sast_payment:
  stage: security
  image: node:14
  before_script:
    - cd payment
  script:
    - echo "Running security scan sast"
    - npm install
    - npm audit --json > payment-service-security-report.json
  artifacts:
      paths:
        - payment/payment-service-security-report.json

security-sast_order:
  stage: security
  image: node:14
  before_script:
    - cd order
  script:
    - echo "Running security scan sast"
    - npm install
    - npm audit --json > order-service-security-report.json
  artifacts:
      paths:
        - order/order-service-security-report.json

security-sast_frontend:
  stage: security
  image: node:14
  before_script:
    - cd e-commerce
  script:
    - echo "Running security scan sast"
    - npm install
    - npm audit --json > frontend-service-security-report.json || true
  artifacts:
      paths:
        - e-commerce/frontend-service-security-report.json

security-sca:
  stage: security
  script:
    - echo "Running security scan sca"

product:
  image: docker:latest
  stage: build
  before_script:
    - cd product
  script:
    - docker login -u abdel2307 -p dckr_pat_vTbok7FHVXxtAldm_iKsL8JcR7w
    - docker build -t abdel2307/my-product .
    - docker images
    - docker push abdel2307/my-product


payment:
  image: docker:latest
  stage: build
  before_script:
    - cd payment
  script:
    - docker login -u abdel2307 -p dckr_pat_vTbok7FHVXxtAldm_iKsL8JcR7w
    - docker build -t abdel2307/my-payment .
    - docker push abdel2307/my-payment

order:
  image: docker:latest
  stage: build
  before_script:
    - cd order
  script:
    - docker login -u abdel2307 -p dckr_pat_vTbok7FHVXxtAldm_iKsL8JcR7w
    - docker build -t abdel2307/my-order .
    - docker push abdel2307/my-order

frontend:
  image: docker:latest
  stage: build
  before_script:
    - cd e-commerce
  script:
    - docker login -u abdel2307 -p dckr_pat_vTbok7FHVXxtAldm_iKsL8JcR7w
    - docker build -t abdel2307/frontend_image .
    - docker push abdel2307/frontend_image

docker_scan:
  image: docker:latest
  stage: dckr_scan
  script:
    - echo "Running dckr_scan "
    #- docker login -u abdel2307 -p dckr_pat_vTbok7FHVXxtAldm_iKsL8JcR7w
    #- docker scan --login
    #- docker pull abdel2307/my-product
    #- docker scan abdel2307/my-product
    #- docker pull abdel2307/my-payment
    #- docker scan abdel2307/my-payment
    #- docker pull abdel2307/my-order
    #- docker scan abdel2307/my-order
    #- docker pull abdel2307/frontend_image
    #- docker scan abdel2307/frontend_image

k8s_deployment:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  
  script:
    - kubectl config get-contexts
    - kubectl config use-context abdel230702/services:primary-agent
    - kubectl apply -f ./release/kubernetes-manifests.yml
